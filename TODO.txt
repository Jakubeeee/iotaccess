Drafts:
1. Add rest endpoints for switching options (enabling/disabling deployers and plugins, changing intervals of scheduled jobs etc.)
 There could be a property table in the database. (Status: Big effort, but nice to have)
2. Add metadata of scheduled jobs to database (Status: It's for validation only, not really needed that much, nice to have though)
3. Add a pom module to be plugins parent. It would aggregate available libraries and their versions supported in the core runtime. (I can even add additional parent for dependency versions only)
4. Write integration tests for saving various entry types (standard entries, meteo entries and any future entry types)
5. Create a common base module for random number plugins used for testing purposes. Purpose: avoid code duplication (the modules are small and for testing only so not critical)
6. Add spring aop for logging. Some places (eg. data services) have common pattern for logging - it could be extracted to aspects. (Status: Not a big improvement but nice to have)
7. Add testutils module used by all other modules for plain java test utilities - I can move the container class and base class for integration tests (Status: Nice idea, but for now it would have ony 2 classes and only used by core module)
8. Add common module used by all other modules for plain java utilities (Status: Nice idea, but there is not much common code for now)
9. Modularize core module (Status: Very nice to have but there are problems with testcontainers library: auto module name conflicts, split packages etc. I will have to remove testcontainers)
10. Validation api for plugins. Plugins would write custom validation rules. It would be invoked in core, after fetching and before persisting.
    Validator type - structural and logical(?). If the first doesn't pass do not launch the second one. Always collect all the errors. (Status: Big effort and not needed that much right now)
11. Add versioning for plugins. If there is plugin available for deployer with non-unique identifier, check it's version. If it higher then replace existing one. (Status: not needed right now, maybe later it will be more useful)