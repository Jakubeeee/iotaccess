Priority queue:
1. Logging - add more log messages, change levels (more trace and debug, less info). Add entries in application.properties
2. Create versions of random-number-plugin for spi,db and fs testing
3. Add support for database and filesystem plugins
4. Add a pom module to be plugins parent. It would aggregate available libraries and their versions supported in the core runtime. (I can even add additional parent for dependency versions only)
5. Write integration tests for saving various entries

Drafts:
1. Validation api for plugins. Plugins would write custom validation rules. It would be invoked in core, after fetching and before persisting.
    Validator type - structural and logical(?). If the first doesn't pass do not launch the second one. Always collect all the errors.
2. Add versioning for plugins. If there is plugin available for deployer with non-unique identifier, check it's version. If it higher then replace existing one.
3. Add new "SweepConfig" to plugin. It would be a configuration of removing old unnecessary data using a scheduled job.
4. Add rest endpoints for switching options (enabling/disabling deployers and plugins, changing intervals of scheduled jobs etc.)
5. Add testutils module used by all other modules for plain java test utilities - I can move the container class and base class for integration tests
6. Add common module used by all other modules for plain java utilities (don't have lots of common code for now, though)
7. Add java 9 module system. It's cool but there are issues with testcontainers library (auto module name conflicts, split packages)
8. Add metadata of scheduled jobs to database